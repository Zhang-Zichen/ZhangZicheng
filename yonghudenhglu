<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>用户系统</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#165DFF',
                        secondary: '#4080FF',
                        neutral: '#F2F3F5',
                        'neutral-dark': '#4E5969',
                        success: '#00B42A',
                        danger: '#F53F3F',
                        warning: '#FF7D00',
                    },
                    fontFamily: {
                        inter: ['Inter', 'system-ui', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .bg-gradient-primary {
                background: linear-gradient(135deg, #165DFF 0%, #4080FF 100%);
            }
            .text-shadow {
                text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .transition-custom {
                transition: all 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
            }
            .input-focus {
                @apply focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none;
            }
            .btn-hover {
                @apply hover:shadow-lg hover:-translate-y-0.5 transition-all duration-300;
            }
            .card-hover {
                @apply hover:shadow-xl hover:-translate-y-1 transition-all duration-300;
            }
        }
    </style>
</head>
<body class="font-inter bg-gray-50 min-h-screen flex items-center justify-center p-4">
    <div id="app" class="relative w-full max-w-6xl min-h-[600px] bg-white rounded-2xl shadow-xl overflow-hidden">
        <!-- 登录和注册容器 -->
        <div id="auth-container" class="absolute inset-0 flex">
            <!-- 左侧登录区域 -->
            <div id="login-container" class="w-full md:w-1/2 flex flex-col items-center justify-center p-8 transition-custom">
                <div class="w-full max-w-md">
                    <div class="text-center mb-10">
                        <h2 class="text-[clamp(1.5rem,3vw,2.5rem)] font-bold text-gray-800 mb-2">欢迎回来</h2>
                        <p class="text-gray-500">请登录您的账户继续访问</p>
                    </div>
                    
                    <form id="login-form" class="space-y-6">
                        <div class="space-y-2">
                            <label for="login-username" class="block text-sm font-medium text-gray-700">用户名</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                                    <i class="fa fa-user"></i>
                                </span>
                                <input type="text" id="login-username" name="login-username" required
                                    class="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 input-focus"
                                    placeholder="请输入您的用户名">
                            </div>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="login-password" class="block text-sm font-medium text-gray-700">密码</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                                    <i class="fa fa-lock"></i>
                                </span>
                                <input type="password" id="login-password" name="login-password" required
                                    class="w-full pl-10 pr-10 py-3 rounded-lg border border-gray-300 input-focus"
                                    placeholder="请输入您的密码">
                                <button type="button" id="toggle-login-password" 
                                    class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 hover:text-gray-700">
                                    <i class="fa fa-eye-slash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <input id="remember-me" type="checkbox" class="h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary">
                                <label for="remember-me" class="ml-2 block text-sm text-gray-700">记住我</label>
                            </div>
                        </div>
                        
                        <button type="submit" 
                            class="w-full bg-primary hover:bg-primary/90 text-white font-medium py-3 px-4 rounded-lg shadow-md btn-hover">
                            登录
                        </button>
                    </form>
                    
                    <div class="mt-8 text-center">
                        <p class="text-gray-600">
                            还没有账户? 
                            <button id="show-register" class="text-primary font-medium hover:text-primary/80 transition-colors">
                                立即注册
                            </button>
                        </p>
                    </div>
                </div>
            </div>
            
            <!-- 右侧注册区域 -->
            <div id="register-container" class="w-full md:w-1/2 flex flex-col items-center justify-center p-8 transition-custom transform translate-x-full bg-gradient-primary text-white">
                <div class="w-full max-w-md">
                    <div class="text-center mb-10">
                        <h2 class="text-[clamp(1.5rem,3vw,2.5rem)] font-bold mb-2 text-shadow">创建新账户</h2>
                        <p>填写以下信息注册您的账户</p>
                    </div>
                    
                    <form id="register-form" class="space-y-6">
                        <div class="space-y-2">
                            <label for="register-username" class="block text-sm font-medium">用户名</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-white/70">
                                    <i class="fa fa-user"></i>
                                </span>
                                <input type="text" id="register-username" name="register-username" required
                                    class="w-full pl-10 pr-4 py-3 rounded-lg border border-white/30 bg-white/10 text-white placeholder-white/50 input-focus"
                                    placeholder="请创建您的用户名">
                            </div>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="register-password" class="block text-sm font-medium">设置密码</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-white/70">
                                    <i class="fa fa-lock"></i>
                                </span>
                                <input type="password" id="register-password" name="register-password" required
                                    class="w-full pl-10 pr-10 py-3 rounded-lg border border-white/30 bg-white/10 text-white placeholder-white/50 input-focus"
                                    placeholder="8-16位数字或字母">
                                <button type="button" id="toggle-register-password" 
                                    class="absolute inset-y-0 right-0 flex items-center pr-3 text-white/70 hover:text-white">
                                    <i class="fa fa-eye-slash"></i>
                                </button>
                            </div>
                            <div id="password-strength" class="text-xs bg-white/10 rounded px-3 py-2">
                                <div class="flex justify-between mb-1">
                                    <span>密码强度</span>
                                    <span id="strength-text">未输入</span>
                                </div>
                                <div class="h-1 w-full bg-white/20 rounded-full overflow-hidden">
                                    <div id="strength-bar" class="h-full bg-danger transition-all duration-300" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="confirm-password" class="block text-sm font-medium">确认密码</label>
                            <div class="relative">
                                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-white/70">
                                    <i class="fa fa-lock"></i>
                                </span>
                                <input type="password" id="confirm-password" name="confirm-password" required
                                    class="w-full pl-10 pr-10 py-3 rounded-lg border border-white/30 bg-white/10 text-white placeholder-white/50 input-focus"
                                    placeholder="请再次输入密码">
                                <button type="button" id="toggle-confirm-password" 
                                    class="absolute inset-y-0 right-0 flex items-center pr-3 text-white/70 hover:text-white">
                                    <i class="fa fa-eye-slash"></i>
                                </button>
                            </div>
                            <p id="password-match-message" class="text-xs hidden"></p>
                        </div>
                        
                        <button type="submit" 
                            class="w-full bg-white text-primary hover:bg-white/90 font-medium py-3 px-4 rounded-lg shadow-md btn-hover">
                            注册账户
                        </button>
                    </form>
                    
                    <div class="mt-8 text-center">
                        <p>
                            已有账户? 
                            <button id="show-login" class="font-medium hover:text-white/80 transition-colors">
                                返回登录
                            </button>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 用户主页 -->
        <div id="user-dashboard" class="absolute inset-0 hidden">
            <!-- 顶部导航栏 -->
            <div class="bg-primary text-white py-4 px-6 flex justify-between items-center">
                <h2 class="text-xl font-bold">用户中心</h2>
                <div class="flex items-center space-x-4">
                    <span id="user-info" class="flex items-center">
                        <i class="fa fa-user-circle mr-2"></i>
                        <span id="current-username"></span>
                    </span>
                    <button id="logout-btn" class="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg transition-colors">
                        <i class="fa fa-sign-out mr-1"></i> 退出
                    </button>
                </div>
            </div>
            
            <!-- 内容区域 -->
            <div class="p-6">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- 左侧：积分信息 -->
                    <div class="bg-white rounded-xl shadow-md p-6 card-hover">
                        <h3 class="text-lg font-semibold mb-4">我的积分</h3>
                        <div class="bg-neutral rounded-lg p-6 text-center">
                            <div class="text-4xl font-bold text-primary mb-2" id="user-points">0</div>
                            <p class="text-gray-500">上次签到时间: <span id="last-checkin">未签到</span></p>
                        </div>
                    </div>
                    
                    <!-- 右侧：签到按钮 -->
                    <div class="bg-white rounded-xl shadow-md p-6 card-hover">
                        <h3 class="text-lg font-semibold mb-4">每日签到</h3>
                        <div class="flex flex-col items-center justify-center h-full">
                            <p class="text-gray-600 mb-6 text-center">每日签到可获得10积分</p>
                            <button id="checkin-btn" class="bg-primary hover:bg-primary/90 text-white font-medium py-3 px-8 rounded-lg shadow-md btn-hover">
                                <i class="fa fa-calendar-check-o mr-2"></i> 立即签到
                            </button>
                            <p id="checkin-message" class="mt-4 text-success hidden"></p>
                        </div>
                    </div>
                </div>
                
                <!-- 商城区域 -->
                <div class="mt-8">
                    <h3 class="text-lg font-semibold mb-4">积分商城</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="shop-items">
                        <!-- 商城商品将通过JavaScript动态添加 -->
                    </div>
                </div>
                
                <!-- 管理员区域 (仅对管理员可见) -->
                <div id="admin-panel" class="mt-8 hidden">
                    <div class="bg-primary/10 rounded-xl p-6">
                        <h3 class="text-lg font-semibold mb-4 flex items-center">
                            <i class="fa fa-shield mr-2 text-primary"></i> 管理员面板
                        </h3>
                        <h4 class="text-md font-medium mb-3">待处理兑换申请</h4>
                        <div id="pending-requests" class="space-y-4">
                            <!-- 待处理申请将通过JavaScript动态添加 -->
                            <div class="text-gray-500 italic">暂无待处理申请</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 确认对话框 -->
        <div id="confirm-modal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-xl shadow-xl p-6 max-w-md w-full mx-4">
                <h3 class="text-lg font-semibold mb-4" id="modal-title">确认操作</h3>
                <p class="text-gray-600 mb-6" id="modal-message">您确定要执行此操作吗？</p>
                <div class="flex justify-end space-x-3">
                    <button id="modal-cancel" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors">
                        取消
                    </button>
                    <button id="modal-confirm" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
                        确认
                    </button>
                </div>
            </div>
        </div>
        
        <!-- 通知提示 -->
        <div id="notification" class="fixed top-4 right-4 max-w-sm w-full bg-white rounded-lg shadow-lg p-4 transform translate-x-full transition-transform duration-300 z-50 flex items-start">
            <div id="notification-icon" class="mr-3 text-success">
                <i class="fa fa-check-circle"></i>
            </div>
            <div class="flex-1">
                <h4 id="notification-title" class="font-medium text-gray-800">成功</h4>
                <p id="notification-message" class="text-sm text-gray-600 mt-1">操作已完成</p>
            </div>
            <button id="close-notification" class="ml-3 text-gray-400 hover:text-gray-600">
                <i class="fa fa-times"></i>
            </button>
        </div>
    </div>

    <script>
        // 存储用户数据（模拟数据库）
        let users = JSON.parse(localStorage.getItem('users')) || [];
        let currentUser = null;
        let currentUserId = null;
        
        // 商品数据
        const products = [
            {
                id: 1,
                name: "流浪四眼碶三天管理员",
                price: 60,
                description: "成为流浪四眼碶的管理员，管理三天社区事务",
                image: "https://picsum.photos/seed/admin/300/200"
            }
        ];
        
        // 待处理的兑换申请
        let pendingRequests = JSON.parse(localStorage.getItem('pendingRequests')) || [];
        
        // DOM元素
        const authContainer = document.getElementById('auth-container');
        const userDashboard = document.getElementById('user-dashboard');
        const loginContainer = document.getElementById('login-container');
        const registerContainer = document.getElementById('register-container');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const showRegisterBtn = document.getElementById('show-register');
        const showLoginBtn = document.getElementById('show-login');
        const logoutBtn = document.getElementById('logout-btn');
        const checkinBtn = document.getElementById('checkin-btn');
        const userPointsEl = document.getElementById('user-points');
        const lastCheckinEl = document.getElementById('last-checkin');
        const checkinMessageEl = document.getElementById('checkin-message');
        const shopItemsEl = document.getElementById('shop-items');
        const adminPanel = document.getElementById('admin-panel');
        const pendingRequestsEl = document.getElementById('pending-requests');
        const currentUsernameEl = document.getElementById('current-username');
        const confirmModal = document.getElementById('confirm-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalMessage = document.getElementById('modal-message');
        const modalCancel = document.getElementById('modal-cancel');
        const modalConfirm = document.getElementById('modal-confirm');
        const notification = document.getElementById('notification');
        const notificationTitle = document.getElementById('notification-title');
        const notificationMessage = document.getElementById('notification-message');
        const notificationIcon = document.getElementById('notification-icon');
        const closeNotification = document.getElementById('close-notification');
        
        // 初始化应用
        function initApp() {
            // 检查是否有已登录用户
            const savedUserId = localStorage.getItem('currentUserId');
            if (savedUserId) {
                currentUserId = savedUserId;
                currentUser = users.find(user => user.id === savedUserId);
                if (currentUser) {
                    showDashboard();
                    updateDashboard();
                }
            }
            
            // 渲染商城商品
            renderShopItems();
            
            // 更新管理员面板
            updateAdminPanel();
        }
        
        // 注册新用户
        function registerUser(username, password) {
            // 检查用户名是否已存在
            const userExists = users.some(user => user.username === username);
            if (userExists) {
                showNotification('错误', '用户名已存在', 'danger');
                return false;
            }
            
            // 确定用户是否为第一个注册的（管理员）
            const isAdmin = users.length === 0;
            
            // 创建新用户
            const newUser = {
                id: Date.now().toString(),
                username,
                password,
                points: 0,
                lastCheckin: null,
                isAdmin,
                redeemedItems: []
            };
            
            // 添加到用户列表
            users.push(newUser);
            
            // 保存到本地存储
            localStorage.setItem('users', JSON.stringify(users));
            
            showNotification('成功', '注册成功，请登录', 'success');
            return true;
        }
        
        // 用户登录
        function loginUser(username, password) {
            const user = users.find(user => user.username === username && user.password === password);
            
            if (user) {
                currentUser = user;
                currentUserId = user.id;
                
                // 保存当前用户ID到本地存储
                localStorage.setItem('currentUserId', currentUserId);
                
                showDashboard();
                updateDashboard();
                return true;
            } else {
                showNotification('错误', '用户名或密码不正确', 'danger');
                return false;
            }
        }
        
        // 显示用户仪表盘
        function showDashboard() {
            authContainer.classList.add('hidden');
            userDashboard.classList.remove('hidden');
            
            // 更新用户名显示
            currentUsernameEl.textContent = currentUser.username;
            
            // 如果是管理员，显示管理员面板
            if (currentUser.isAdmin) {
                adminPanel.classList.remove('hidden');
            }
        }
        
        // 更新仪表盘信息
        function updateDashboard() {
            // 更新积分
            userPointsEl.textContent = currentUser.points;
            
            // 更新上次签到时间
            if (currentUser.lastCheckin) {
                const lastCheckinDate = new Date(currentUser.lastCheckin);
                lastCheckinEl.textContent = lastCheckinDate.toLocaleDateString('zh-CN');
            } else {
                lastCheckinEl.textContent = '未签到';
            }
            
            // 检查今天是否已签到
            const today = new Date().toDateString();
            const lastCheckin = currentUser.lastCheckin ? new Date(currentUser.lastCheckin).toDateString() : null;
            
            if (lastCheckin === today) {
                checkinBtn.disabled = true;
                checkinBtn.classList.add('opacity-50', 'cursor-not-allowed');
                checkinBtn.innerHTML = '<i class="fa fa-check mr-2"></i> 今日已签到';
                checkinMessageEl.textContent = '您今天已经签到过了，明天再来吧！';
                checkinMessageEl.classList.remove('hidden');
            } else {
                checkinBtn.disabled = false;
                checkinBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                checkinBtn.innerHTML = '<i class="fa fa-calendar-check-o mr-2"></i> 立即签到';
                checkinMessageEl.classList.add('hidden');
            }
        }
        
        // 用户签到
        function handleCheckin() {
            const today = new Date();
            
            // 更新用户信息
            currentUser.points += 10;
            currentUser.lastCheckin = today.toISOString();
            
            // 更新本地存储
            const userIndex = users.findIndex(user => user.id === currentUserId);
            users[userIndex] = currentUser;
            localStorage.setItem('users', JSON.stringify(users));
            
            // 更新UI
            updateDashboard();
            
            // 显示通知
            showNotification('签到成功', '您已成功签到，获得10积分！', 'success');
        }
        
        // 渲染商城商品
        function renderShopItems() {
            shopItemsEl.innerHTML = '';
            
            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'bg-white rounded-xl shadow-md overflow-hidden card-hover';
                productCard.innerHTML = `
                    <img src="${product.image}" alt="${product.name}" class="w-full h-40 object-cover">
                    <div class="p-4">
                        <h4 class="font-semibold text-lg mb-1">${product.name}</h4>
                        <p class="text-gray-500 text-sm mb-3">${product.description}</p>
                        <div class="flex justify-between items-center">
                            <span class="text-primary font-bold">
                                <i class="fa fa-diamond mr-1"></i> ${product.price} 积分
                            </span>
                            <button 
                                class="redeem-btn bg-primary hover:bg-primary/90 text-white px-3 py-1 rounded-lg text-sm"
                                data-id="${product.id}"
                                data-name="${product.name}"
                                data-price="${product.price}">
                                立即兑换
                            </button>
                        </div>
                    </div>
                `;
                
                shopItemsEl.appendChild(productCard);
            });
            
            // 添加兑换按钮事件监听
            document.querySelectorAll('.redeem-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const productId = btn.getAttribute('data-id');
                    const productName = btn.getAttribute('data-name');
                    const productPrice = parseInt(btn.getAttribute('data-price'));
                    
                    // 检查用户积分是否足够
                    if (currentUser.points < productPrice) {
                        showNotification('积分不足', '您的积分不足以兑换此商品', 'warning');
                        return;
                    }
                    
                    // 打开确认对话框
                    openConfirmModal(
                        '确认兑换', 
                        `您确定要使用 ${productPrice} 积分兑换 "${productName}" 吗？`,
                        () => {
                            // 创建兑换申请
                            const request = {
                                id: Date.now().toString(),
                                userId: currentUserId,
                                username: currentUser.username,
                                productId,
                                productName,
                                price: productPrice,
                                timestamp: new Date().toISOString()
                            };
                            
                            // 添加到待处理申请
                            pendingRequests.push(request);
                            localStorage.setItem('pendingRequests', JSON.stringify(pendingRequests));
                            
                            // 显示通知
                            showNotification('申请提交成功', '您的兑换申请已提交，请等待管理员确认', 'success');
                        }
                    );
                });
            });
        }
        
        // 更新管理员面板
        function updateAdminPanel() {
            if (!currentUser || !currentUser.isAdmin) return;
            
            pendingRequestsEl.innerHTML = '';
            
            if (pendingRequests.length === 0) {
                pendingRequestsEl.innerHTML = '<div class="text-gray-500 italic">暂无待处理申请</div>';
                return;
            }
            
            pendingRequests.forEach(request => {
                const requestEl = document.createElement('div');
                requestEl.className = 'bg-white rounded-lg p-4 shadow-sm';
                requestEl.innerHTML = `
                    <div class="flex justify-between items-start mb-2">
                        <h5 class="font-medium">${request.username} 申请兑换 <span class="text-primary">"${request.productName}"</span></h5>
                        <span class="text-xs text-gray-500">${new Date(request.timestamp).toLocaleString()}</span>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button 
                            class="decline-request bg-white border border-danger text-danger hover:bg-danger/10 px-3 py-1 rounded text-sm transition-colors"
                            data-id="${request.id}">
                            拒绝
                        </button>
                        <button 
                            class="approve-request bg-white border border-success text-success hover:bg-success/10 px-3 py-1 rounded text-sm transition-colors"
                            data-id="${request.id}">
                            批准
                        </button>
                    </div>
                `;
                
                pendingRequestsEl.appendChild(requestEl);
            });
            
            // 添加批准按钮事件监听
            document.querySelectorAll('.approve-request').forEach(btn => {
                btn.addEventListener('click', () => {
                    const requestId = btn.getAttribute('data-id');
                    const request = pendingRequests.find(r => r.id === requestId);
                    
                    if (!request) return;
                    
                    openConfirmModal(
                        '确认批准', 
                        `您确定要批准 ${request.username} 的兑换申请吗？`,
                        () => {
                            // 找到用户并扣除积分
                            const userIndex = users.findIndex(user => user.id === request.userId);
                            if (userIndex !== -1) {
                                users[userIndex].points -= request.price;
                                users[userIndex].redeemedItems.push({
                                    productId: request.productId,
                                    productName: request.productName,
                                    timestamp: new Date().toISOString()
                                });
                                
                                // 更新本地存储
                                localStorage.setItem('users', JSON.stringify(users));
                            }
                            
                            // 从待处理列表中移除
                            pendingRequests = pendingRequests.filter(r => r.id !== requestId);
                            localStorage.setItem('pendingRequests', JSON.stringify(pendingRequests));
                            
                            // 更新UI
                            updateAdminPanel();
                            
                            // 显示通知
                            showNotification('操作成功', '已批准兑换申请', 'success');
                        }
                    );
                });
            });
            
            // 添加拒绝按钮事件监听
            document.querySelectorAll('.decline-request').forEach(btn => {
                btn.addEventListener('click', () => {
                    const requestId = btn.getAttribute('data-id');
                    
                    openConfirmModal(
                        '确认拒绝', 
                        `您确定要拒绝此兑换申请吗？`,
                        () => {
                            // 从待处理列表中移除
                            pendingRequests = pendingRequests.filter(r => r.id !== requestId);
                            localStorage.setItem('pendingRequests', JSON.stringify(pendingRequests));
                            
                            // 更新UI
                            updateAdminPanel();
                            
                            // 显示通知
                            showNotification('操作成功', '已拒绝兑换申请', 'warning');
                        }
                    );
                });
            });
        }
        
        // 打开确认对话框
        function openConfirmModal(title, message, confirmCallback) {
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            
            // 存储确认回调
            modalConfirm.onclick = () => {
                confirmCallback();
                closeConfirmModal();
            };
            
            confirmModal.classList.remove('hidden');
        }
        
        // 关闭确认对话框
        function closeConfirmModal() {
            confirmModal.classList.add('hidden');
        }
        
        // 显示通知
        function showNotification(title, message, type = 'success') {
            notificationTitle.textContent = title;
            notificationMessage.textContent = message;
            
            // 设置图标和颜色
            notificationIcon.className = 'mr-3';
            if (type === 'success') {
                notificationIcon.classList.add('text-success', 'fa', 'fa-check-circle');
            } else if (type === 'error') {
                notificationIcon.classList.add('text-danger', 'fa', 'fa-times-circle');
            } else if (type === 'warning') {
                notificationIcon.classList.add('text-warning', 'fa', 'fa-exclamation-circle');
            }
            
            // 显示通知
            notification.classList.remove('translate-x-full');
            
            // 3秒后自动关闭
            setTimeout(() => {
                closeNotificationFunc();
            }, 3000);
        }
        
        // 关闭通知
        function closeNotificationFunc() {
            notification.classList.add('translate-x-full');
        }
        
        // 设置密码可见性切换
        function setupPasswordToggle(buttonId, passwordId) {
            const button = document.getElementById(buttonId);
            const passwordInput = document.getElementById(passwordId);
            
            button.addEventListener('click', () => {
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                
                // 切换图标
                const icon = button.querySelector('i');
                if (type === 'text') {
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                } else {
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                }
            });
        }
        
        // 设置密码强度检测
        function setupPasswordStrength() {
            const passwordInput = document.getElementById('register-password');
            const strengthBar = document.getElementById('strength-bar');
            const strengthText = document.getElementById('strength-text');
            
            passwordInput.addEventListener('input', () => {
                const password = passwordInput.value;
                let strength = 0;
                
                // 密码长度检查
                if (password.length >= 8 && password.length <= 16) {
                    strength += 25;
                }
                
                // 包含数字
                if (/[0-9]/.test(password)) {
                    strength += 25;
                }
                
                // 包含小写字母
                if (/[a-z]/.test(password)) {
                    strength += 25;
                }
                
                // 包含大写字母
                if (/[A-Z]/.test(password)) {
                    strength += 25;
                }
                
                // 仅包含允许的字符
                if (/^[0-9a-zA-Z]+$/.test(password)) {
                    // 有效字符
                } else {
                    strength = 0;
                }
                
                // 更新强度条和文本
                strengthBar.style.width = `${strength}%`;
                
                if (strength === 0) {
                    strengthBar.className = 'h-full bg-danger transition-all duration-300';
                    strengthText.textContent = '未输入';
                    strengthText.className = 'text-white/70';
                } else if (strength <= 25) {
                    strengthBar.className = 'h-full bg-danger transition-all duration-300';
                    strengthText.textContent = '弱';
                    strengthText.className = 'text-danger';
                } else if (strength <= 50) {
                    strengthBar.className = 'h-full bg-yellow-500 transition-all duration-300';
                    strengthText.textContent = '中';
                    strengthText.className = 'text-yellow-500';
                } else if (strength <= 75) {
                    strengthBar.className = 'h-full bg-blue-500 transition-all duration-300';
                    strengthText.textContent = '强';
                    strengthText.className = 'text-blue-500';
                } else {
                    strengthBar.className = 'h-full bg-success transition-all duration-300';
                    strengthText.textContent = '非常强';
                    strengthText.className = 'text-success';
                }
            });
        }
        
        // 设置密码匹配检查
        function setupPasswordMatch() {
            const passwordInput = document.getElementById('register-password');
            const confirmInput = document.getElementById('confirm-password');
            const message = document.getElementById('password-match-message');
            
            function checkMatch() {
                const password = passwordInput.value;
                const confirm = confirmInput.value;
                
                if (confirm === '') {
                    message.classList.add('hidden');
                    confirmInput.classList.remove('border-danger', 'border-success');
                } else if (password === confirm) {
                    message.classList.remove('hidden', 'text-danger');
                    message.classList.add('text-success');
                    message.textContent = '密码匹配';
                    confirmInput.classList.remove('border-danger');
                    confirmInput.classList.add('border-success');
                } else {
                    message.classList.remove('hidden', 'text-success');
                    message.classList.add('text-danger');
                    message.textContent = '密码不匹配';
                    confirmInput.classList.remove('border-success');
                    confirmInput.classList.add('border-danger');
                }
            }
            
            passwordInput.addEventListener('input', checkMatch);
            confirmInput.addEventListener('input', checkMatch);
        }
        
        // 设置表单切换
        function setupFormToggle() {
            showRegisterBtn.addEventListener('click', () => {
                loginContainer.classList.add('translate-x-[-100%]');
                registerContainer.classList.remove('translate-x-full');
                registerContainer.classList.add('translate-x-0');
            });
            
            showLoginBtn.addEventListener('click', () => {
                loginContainer.classList.remove('translate-x-[-100%]');
                registerContainer.classList.remove('translate-x-0');
                registerContainer.classList.add('translate-x-full');
            });
        }
        
        // 设置表单提交
        function setupFormSubmits() {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const username = document.getElementById('login-username').value;
                const password = document.getElementById('login-password').value;
                loginUser(username, password);
            });
            
            registerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const username = document.getElementById('register-username').value;
                const password = document.getElementById('register-password').value;
                
                // 验证密码长度
                if (password.length < 8 || password.length > 16) {
                    showNotification('错误', '密码长度必须在8-16个字符之间', 'danger');
                    return;
                }
                
                // 验证密码字符类型
                if (!/^[0-9a-zA-Z]+$/.test(password)) {
                    showNotification('错误', '密码只能包含数字和大小写字母', 'danger');
                    return;
                }
                
                // 注册用户
                if (registerUser(username, password)) {
                    // 注册成功后自动切换到登录页面
                    loginContainer.classList.remove('translate-x-[-100%]');
                    registerContainer.classList.remove('translate-x-0');
                    registerContainer.classList.add('translate-x-full');
                }
            });
        }
        
        // 设置签到按钮
        function setupCheckinBtn() {
            checkinBtn.addEventListener('click', handleCheckin);
        }
        
        // 设置登出按钮
        function setupLogoutBtn() {
            logoutBtn.addEventListener('click', () => {
                // 清除当前用户
                currentUser = null;
                currentUserId = null;
                
                // 清除本地存储
                localStorage.removeItem('currentUserId');
                
                // 显示登录页面
                userDashboard.classList.add('hidden');
                authContainer.classList.remove('hidden');
                
                // 重置表单
                loginForm.reset();
                registerForm.reset();
                
                showNotification('已登出', '您已成功退出账户', 'success');
            });
        }
        
        // 设置模态框关闭按钮
        function setupModalClose() {
            modalCancel.addEventListener('click', closeConfirmModal);
            confirmModal.addEventListener('click', (e) => {
                if (e.target === confirmModal) {
                    closeConfirmModal();
                }
            });
        }
        
        // 设置通知关闭按钮
        function setupNotificationClose() {
            closeNotification.addEventListener('click', closeNotificationFunc);
        }
        
        // 初始化所有功能
        document.addEventListener('DOMContentLoaded', () => {
            setupPasswordToggle('toggle-login-password', 'login-password');
            setupPasswordToggle('toggle-register-password', 'register-password');
            setupPasswordToggle('toggle-confirm-password', 'confirm-password');
            setupPasswordStrength();
            setupPasswordMatch();
            setupFormToggle();
            setupFormSubmits();
            setupCheckinBtn();
            setupLogoutBtn();
            setupModalClose();
            setupNotificationClose();
            initApp();
        });
    </script>
</body>
</html>
    
